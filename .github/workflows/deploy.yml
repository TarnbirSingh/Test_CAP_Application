name: SAP CAP CI/CD to Cloud Foundry

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    name: Build, Test, and Package MTAR
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
      MTAR_NAME: "${{ github.repository }}-${{ github.sha }}.mtar"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Display Node and npm versions
        run: |
          set -e
          node -v && npm -v

      - name: Clean install dependencies
        run: |
          set -e
          npm ci

      - name: Validate CDS models (srv -> csn)
        run: |
          set -e
          npx cds compile srv --to csn

      - name: Run unit tests (if available)
        run: |
          set -e
          if node -e "const p=require('./package.json');process.exit(p.scripts&&p.scripts.test?0:1)"; then
            npm test
          else
            echo "No test script defined. Skipping tests."
          fi

      - name: Build CAP project
        run: |
          set -e
          npm run build || npx cds build --production

      - name: Install Cloud MTA Build Tool (mbt)
        run: |
          set -e
          npm install -g mbt
          mbt --version

      - name: Build MTAR and prepare artifact
        run: |
          set -e
          SAFE_NAME="${MTAR_NAME//\//-}"
          mkdir -p mta_archives dist

          # Determine location of mta.yaml
          BUILD_DIR="."
          if [ -f "mta.yaml" ]; then
            BUILD_DIR="."
          elif [ -f "gen/mta.yaml" ]; then
            BUILD_DIR="gen"
          else
            echo "mta.yaml not found in project root or gen/. Ensure your project includes an MTA or run 'cds add mta'." >&2
            exit 1
          fi

          # Build MTAR
          pushd "$BUILD_DIR" >/dev/null
          mbt build -p cf -t "$GITHUB_WORKSPACE/mta_archives"
          popd >/dev/null

          # Copy and rename MTAR to consistent name
          MTAR_BUILT="$(ls -1t mta_archives/*.mtar | head -n 1)"
          echo "Built MTAR: $MTAR_BUILT"
          cp "$MTAR_BUILT" "dist/$SAFE_NAME"
          echo "Final MTAR path: dist/$SAFE_NAME"
          ls -l dist

      - name: Upload MTAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: mtar
          path: dist/*.mtar
          if-no-files-found: error
          retention-days: 7

  deploy:
    name: Deploy to Cloud Foundry
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      CF_API: ${{ secrets.CF_API }}
      CF_ORG: ${{ secrets.CF_ORG }}
      CF_SPACE: ${{ secrets.CF_SPACE }}
      CF_USERNAME: ${{ secrets.CF_USERNAME }}
      CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
      MTAR_NAME: "${{ github.repository }}-${{ github.sha }}.mtar"
    steps:
      - name: Download MTAR artifact
        uses: actions/download-artifact@v4
        with:
          name: mtar
          path: dist

      - name: Setup Cloud Foundry CLI
        uses: cloudfoundry/cf-cli-action@v2

      - name: Install CF MultiApps plugin
        run: |
          set -e
          cf --version
          cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org || true
          if ! cf plugins | grep -qi multiapps; then
            cf install-plugin -r CF-Community -f multiapps
          fi
          cf plugins

      - name: Authenticate to Cloud Foundry
        env:
          CF_DIAL_TIMEOUT: 60
        run: |
          set -e
          test -n "$CF_API" && test -n "$CF_USERNAME" && test -n "$CF_PASSWORD" && test -n "$CF_ORG" && test -n "$CF_SPACE"
          cf api "$CF_API" --skip-ssl-validation
          cf auth "$CF_USERNAME" "$CF_PASSWORD"
          cf target -o "$CF_ORG" -s "$CF_SPACE"
          cf target

      - name: Deploy MTAR to Cloud Foundry
        run: |
          set -e
          SAFE_NAME="${MTAR_NAME//\//-}"
          MTAR_PATH="dist/$SAFE_NAME"
          if [ ! -f "$MTAR_PATH" ]; then
            echo "MTAR not found at $MTAR_PATH" >&2
            echo "Available files in dist:"
            ls -la dist || true
            exit 1
          fi
          cf deploy "$MTAR_PATH" -f

      - name: Logout from Cloud Foundry
        if: always()
        run: |
          set -e
          cf logout || true